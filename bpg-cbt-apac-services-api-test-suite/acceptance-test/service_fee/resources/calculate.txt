*** Settings ***
Resource          ../../resources/api-imports.txt

*** Keywords ***
Calculate Commission Amount
    [Arguments]    ${decimal_place}    ${base_fare_value}    ${commission_percentage_value}=${commission_percentage_value}
    ${commission_percentage_value}    Convert To Number    ${commission_percentage_value}
    ${calculated_value}    Evaluate    (${base_fare_value}*(${commission_percentage_value}/100))
    ${calculated_value}    Evaluate    round(${calculated_value},${decimal_place})
    ${calculated_value}    Convert To String    ${calculated_value}
    ${calculated_value}    Fix Decimal Places    ${calculated_value}
    Set Test Variable    ${commissionRebateAmount_value}    ${calculated_value}

Calculate Decimal Place
    [Arguments]    ${calculated_value}
    ${calculated_value}    Convert To String    ${calculated_value}
    ${decimals}    Split String    ${calculated_value}    .
    ${decimal_length}    Get Length    ${decimals[1]}
    ${last_decimal}    Run Keyword If    ${decimal_length} == 3    Get Substring    ${decimals[1]}    2
    ...    ELSE    Set Variable    0
    ${last_decimal}    Run Keyword If    ${last_decimal}>4    Get Substring    ${decimals[1]}    \    -1
    ...    ELSE    Set Variable    0
    ${last_decimal}    Run Keyword If    ${decimal_length} == 3    Evaluate    ${last_decimal}+1
    ...    ELSE    Set Variable    ${decimals[1]}
    ${calculated_value}    Set Variable    ${decimals[0]}.${last_decimal}
    ${calculated_value}    Convert To Number    ${calculated_value}
    [Return]    ${calculated_value}

Calculate FOP Amount
    [Arguments]    ${decimal_place}    ${base_fare}    ${taxes}= ${taxes_value}    ${markupAmount_value}=${markupAmount_value}    ${commissionRebateAmount_value}=${commissionRebateAmount_value}
    ${calculated_value}    Evaluate    ${base_fare}+${taxes}+${markupAmount_value}
    ${calculated_value}    Evaluate    ${calculated_value}-${commissionRebateAmount_value}
    ${calculated_value}    Evaluate    round(${calculated_value},${decimal_place})
    ${calculated_value}    Convert To String    ${calculated_value}
    ${calculated_value}    Fix Decimal Places    ${calculated_value}
    Set Test Variable    ${fopAmount_value}    ${calculated_value}

Calculate Fare Incuding Air Taxes
    [Arguments]    ${decimal_place}    ${base_fare_value}    ${taxes_value}=${taxes_value}    ${ob_fee_value}=${ob_fee_value}    ${markupAmount_value}=${markupAmount_value}    ${commissionRebateAmount_value}=${commissionRebateAmount_value}
    ${calculated_value}    Evaluate    ((${base_fare_value}+${taxes_value}+${ob_fee_value}+${markupAmount_value})-${commissionRebateAmount_value})
    ${calculated_value}    Run Keyword If    "${country.upper()}"=="SG"    Calculate Decimal Place    ${calculated_value}
    ...    ELSE    Set Variable    ${calculated_value}
    ${calculated_value}    Evaluate    round(${calculated_value},${decimal_place})
    ${calculated_value}    Convert To String    ${calculated_value}
    ${calculated_value}    Fix Decimal Places    ${calculated_value}
    Set Test Variable    ${airFareWithTaxAmount_value}    ${calculated_value}

Calculate Markup Amount
    [Arguments]    ${decimal_place}    ${base_fare_value}    ${markup_percentage_value}=${markup_percentage_value}
    ${calculated_value}    Evaluate    round((${base_fare_value}*(${markup_percentage_value}/100)), ${decimal_place})
    ${calculated_value}    Convert To String    ${calculated_value}
    ${calculated_value}    Fix Decimal Places    ${calculated_value}
    Set Test Variable    ${markupAmount_value}    ${calculated_value}

Calculate Merchant Fee Amount
    [Arguments]    ${decimal_place}    ${base_fare_value}=${base_fare_value}    ${taxes_value}=${taxes_value}    ${merchant_percentage_value}=${merchant_percentage_value}    ${markupAmount_value}=${markupAmount_value}    ${commissionRebateAmount_value}=${commissionRebateAmount_value}
    ${charged_fare_value}    Evaluate    ${base_fare_value}+${taxes_value}
    ${merchant_percentage_value}    Convert To Number    ${merchant_percentage_value}
    ${calculated_value}    Evaluate    round(((${charged_fare_value}+${markupAmount_value})-${commissionRebateAmount_value})*(${merchant_percentage_value}/100),${decimal_place})
    ${calculated_value}    Convert To String    ${calculated_value}
    ${calculated_value}    Fix Decimal Places    ${calculated_value}
    Set Test Variable    ${merchantFeeAmount_value}    ${calculated_value}

Calculate Total Amount
    [Arguments]    ${decimal_place}    ${airFareWithTaxAmount_value}=${airFareWithTaxAmount_value}    ${transactionFeeAmount_value}=${transactionFeeAmount_value}    ${merchantFeeAmount_value}=${merchantFeeAmount_value}    ${fuel_surcharge}=${fuel_surcharge_value}
    ${calculated_total_amount_value}    Evaluate    ${airFareWithTaxAmount_value}+${transactionFeeAmount_value}+${merchantFeeAmount_value}+${fuel_surcharge}
    ${calculated_total_amount_value}    Evaluate    round(${calculated_total_amount_value},${decimal_place})
    ${calculated_total_amount_value}    Convert To String    ${calculated_total_amount_value}
    ${calculated_total_amount_value}    Fix Decimal Places    ${calculated_total_amount_value}
    Set Test Variable    ${totalAmount_value}    ${calculated_total_amount_value}

Calculate Transaction Fee Amount
    [Arguments]    ${decimal_place}    ${base_fare_value}    ${transaction_percentage_value}=${transaction_percentage_value}
    ${calculated_value}    Evaluate    round((${base_fare_value}*(${transaction_percentage_value}/100)), ${decimal_place})
    ${calculated_value}    Convert To String    ${calculated_value}
    ${calculated_value}    Fix Decimal Places    ${calculated_value}
    [Return]    ${calculated_value}

Determine Transaction Fee CAP
    [Arguments]    ${decimal_place}    ${base_fare_value}    ${transaction_amount_value}=${transaction_amount_value}    ${transaction_percentage_value}=${transaction_percentage_value}
    ${transaction_amount_value}    Set Variable If    "${transaction_amount_value}"=="null"    0    ${transaction_amount_value}
    ${transaction_percentage_value}    Set Variable If    "${transaction_percentage_value}"=="null"    0    ${transaction_percentage_value}
    ${returned_transaction_amount_value}    Calculate Transaction Fee Amount    ${decimal_place}    ${base_fare_value}    ${transaction_percentage_value}
    ${transaction_fee_amount_value}    Set Variable If    ${transaction_amount_value} <= ${returned_transaction_amount_value} and ${transaction_amount_value}!=0    ${transaction_amount_value}    ${returned_transaction_amount_value}
    Set Test Variable    ${transactionFeeAmount_value}    ${transaction_fee_amount_value}

Generate Test Variables For Calculate Fees
    [Arguments]    ${fees_list}    ${country}=SG
    Parse Service Fees List    ${fees_list}    ${country}
    ${fare}    Set Variable If    "${nett_fare_value}" != "null"    ${nett_fare_value}    ${base_fare_value}
    ${decimal_place}    Set Variable If    "${country.upper()}" == "SG"    2    0
    Run Keyword If    "${fuel_surcharge_value}" == "null"    Set Test Variable    ${fuel_surcharge_value}    0
    Run Keyword If    "${commission_amount_value}" == "null" and "${commission_percentage_value}" != "null"    Calculate Commission Amount    ${decimal_place}    ${fare}    ${commission_percentage_value}
    ...    ELSE IF    "${commission_amount_value}" == "null" and "${commission_percentage_value}" == "null"    Set Test Variable    ${commissionRebateAmount_value}    0
    ...    ELSE    Set Test Variable    ${commissionRebateAmount_value}    ${commission_amount_value}
    Run Keyword If    "${markup_amt_value}" == "null" and "${markup_percentage_value}" != "null"    Calculate Markup Amount    ${decimal_place}    ${fare}    ${markup_percentage_value}
    ...    ELSE IF    "${markup_amt_value}" == "null" and "${markup_percentage_value}" == "null"    Set Test Variable    ${markupAmount_value}    0
    ...    ELSE    Set Test Variable    ${markupAmount_value}    ${markup_amt_value}
    Run Keyword If    "${merchant_amount_value}" == "null" and "${merchant_percentage_value}" != "null"    Calculate Merchant Fee Amount    ${decimal_place}    ${fare}    ${taxes_value}    ${merchant_percentage_value}
    ...    ELSE IF    "${merchant_amount_value}" == "null" and "${merchant_percentage_value}" == "null"    Set Test Variable    ${merchantFeeAmount_value}    0
    ...    ELSE    Set Test Variable    ${merchantFeeAmount_value}    ${merchant_amount_value}
    Run Keyword If    "${transaction_amount_value}" == "null" and "${transaction_percentage_value}" == "null"    Set Test Variable    ${transactionFeeAmount_value}    0
    ...    ELSE IF    "${transaction_amount_value}" != "null" and "${transaction_percentage_value}" == "null"    Set Test Variable    ${transactionFeeAmount_value}    ${transaction_amount_value}
    ...    ELSE    Determine Transaction Fee CAP    ${decimal_place}    ${fare}    ${transaction_amount_value}    ${transaction_percentage_value}
    Calculate FOP Amount    ${decimal_place}    ${fare}
    Calculate Fare Incuding Air Taxes    ${decimal_place}    ${fare}
    Calculate Total Amount    ${decimal_place}
    Run Keyword If    "${country.upper()}" != "SG"    Remove Decimal Places

Parse Fees List
    [Arguments]    ${fees_list}
    ${fees_list}    Split String    ${fees_list}    |
    : FOR    ${item}    IN    @{fees_list}
    \    ${details_list}    Split String    ${item}    ,
    \    Set Test Variable    ${${details_list[0]}}    ${details_list[1]}

Parse Service Fees List
    [Arguments]    ${fees_list}    ${country}
    [Documentation]    sample data: fees_list=base_fare;1|taxes;2|ob_fee;3|merchant_amount;null|merchant_percentage;6|transaction_amount;7|transaction_percentage;null|markup_amt;9|markup_percentage;null|commission_amount;11|commission_percentage;12|fuel_surcharge;13|nett_fare;14
    ...
    ...    country=sg
    ${fees_list}    Split String    ${fees_list}    |
    : FOR    ${fees}    IN    @{fees_list}
    \    ${fees_item}    Split String    ${fees}    ,
    \    Set Test Variable    ${${fees_item[0]}_value}    ${fees_item[1]}
    Set Test Variable    ${fees_list}
    Set Test Variable    ${country}    ${country.upper()}

Remove Decimal Places
    ${commissionRebateAmount_value}    Remove String    ${commissionRebateAmount_value}    .00
    ${fopAmount_value}    Remove String    ${fopAmount_value}    .00
    ${airFareWithTaxAmount_value}    Remove String    ${airFareWithTaxAmount_value}    .00
    ${markupAmount_value}    Remove String    ${markupAmount_value}    .00
    ${merchantFeeAmount_value}    Remove String    ${merchantFeeAmount_value}    .00
    ${transactionFeeAmount_value}    Remove String    ${transactionFeeAmount_value}    .00
    ${totalAmount_value}    Remove String    ${totalAmount_value}    .00
    Set Test Variable    ${commissionRebateAmount_value}
    Set Test Variable    ${fopAmount_value}
    Set Test Variable    ${airFareWithTaxAmount_value}
    Set Test Variable    ${markupAmount_value}
    Set Test Variable    ${merchantFeeAmount_value}
    Set Test Variable    ${transactionFeeAmount_value}
    Set Test Variable    ${totalAmount_value}

Send Service Fees Post Request
    [Arguments]    ${token}=${default_token}
    Create Session    fees    ${${env}_base_url}    verify=True
    ${headers}    Run Keyword If    "${token}" != "None"    Create Dictionary    Content-Type=application/json    Authorization=Bearer ${token}
    ...    ELSE    Create Dictionary    Content-Type=application/json
    @{calculate_request_list}    Create List
    Run Keyword If    "${country}"!="null"    Append To List    ${calculate_request_list}    "countryCode":"${country}"
    Run Keyword If    "${base_fare_value}"!="null"    Append To List    ${calculate_request_list}    "baseFare":${base_fare_value}
    Run Keyword If    "${taxes_value}"!="null"    Append To List    ${calculate_request_list}    "totalTaxes":${taxes_value}
    Run Keyword If    "${ob_fee_value}"!="null"    Append To List    ${calculate_request_list}    "obFee":${ob_fee_value}
    Run Keyword If    "${merchant_amount_value}"!="null"    Append To List    ${calculate_request_list}    "merchantFeeAmount":${merchant_amount_value}
    Run Keyword If    "${merchant_percentage_value}"!="null"    Append To List    ${calculate_request_list}    "merchantFeePercentage":${merchant_percentage_value}
    Run Keyword If    "${transaction_amount_value}"!="null"    Append To List    ${calculate_request_list}    "transactionFeeAmount":${transaction_amount_value}
    Run Keyword If    "${transaction_percentage_value}"!="null"    Append To List    ${calculate_request_list}    "transactionFeePercentage":${transaction_percentage_value}
    Run Keyword If    "${markup_amt_value}"!="null"    Append To List    ${calculate_request_list}    "markupAmount":${markup_amt_value}
    Run Keyword If    "${markup_percentage_value}"!="null"    Append To List    ${calculate_request_list}    "markupPercentage":${markup_percentage_value}
    Run Keyword If    "${commission_amount_value}"!="null"    Append To List    ${calculate_request_list}    "commissionRebateAmount":${commission_amount_value}
    Run Keyword If    "${commission_percentage_value}"!="null"    Append To List    ${calculate_request_list}    "commissionRebatePercentage":${commission_percentage_value}
    Run Keyword If    "${fuel_surcharge_value}"!="null"    Append To List    ${calculate_request_list}    "fuelSurcharge":${fuel_surcharge_value}
    Run Keyword If    "${nett_fare_value}"!="null"    Append To List    ${calculate_request_list}    "nettFare":${nett_fare_value}
    ${list_count}    Get Length    ${calculate_request_list}
    : FOR    ${i}    IN RANGE    0    ${list_count}
    \    ${fees_list}    Set Variable If    ${i}==0    ${EMPTY}    ${fees_list},
    \    ${fees_list}    Set Variable    ${fees_list}${calculate_request_list[${i}]}
    ${data}    Set Variable    {${fees_list}}
    Log    ${data}
    ${response}    Post Request    fees    /bpg-cbt-apac-services-rest/api/servicefee    data=${data}    headers=${headers}
    Set Test Variable    ${response}
    Log    ${response.headers}
    Log    ${response.content}
    Set Test Variable    ${api_flag}    fees

Verify Calculated Fees Are Not Returned
    Verify String Does Not Contain Substring    ${response.content}    "fopAmount"
    Verify String Does Not Contain Substring    ${response.content}    "merchantFeeAmount"
    Verify String Does Not Contain Substring    ${response.content}    "transactionFeeAmount"
    Verify String Does Not Contain Substring    ${response.content}    "markupAmount"
    Verify String Does Not Contain Substring    ${response.content}    "commissionRebateAmount"
    Verify String Does Not Contain Substring    ${response.content}    "airFareWithTaxAmount"
    Verify String Does Not Contain Substring    ${response.content}    "totalAmount"

Verify Calculated Fees Are Returned Correctly
    ${data}    Remove String    ${response.content}    {
    ${data}    Remove String    ${data}    }
    ${data}    Remove String    ${data}    "
    ${data_list}    Split String    ${data}    ,
    : FOR    ${item}    IN    @{data_list}
    \    ${items}    Split String    ${item}    :
    \    Verify Actual Value Matches Expected Value    ${items[1]}    ${${items[0]}_value}
